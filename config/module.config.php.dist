<?php

use AliChry\Authorization\Factory\AuthenticationServiceFactory;
use AliChry\Laminas\AccessControl\AccessControlList as ACL;
use AliChry\Laminas\AccessControl\Factory\AccessControlListFactory;
use AliChry\Laminas\Authorization\AuthorizationLink;
use AliChry\Laminas\Authorization\AuthorizationChain;
use Laminas\Authentication\AuthenticationService;

return [
    'service_manager' => [
        'factories' => [
            ACL::class => AccessControlListFactory::class,
            AuthenticationService::class => AuthenticationServiceFactory::class,
            // The Auth adapter that implements AuthenticationAdapterInterface
            // from laminas/laminas-authentication
            YourAuthAdapter::class => YourAuthAdapterFactory::class,
            AuthorizationLink::class => AuthenticationLinkFactory::class,
            AuthorizationChain::class => AuthenticationChainFactory::class,
        ],
    ],
    'authorization' => [
        'operator' => AuthorizationChain::OPERATOR_AND,
        'chain' => [
            'global' => [
                //'authentication_service' => AuthenticationService::class,
                // Alternatively, you can use the below. The decision
                // on which to use depends on whether you have a factory
                // for the referenced service that can configure
                // the authentication service. You can still create your own
                // factory that requires factory build options while using the below,
                // or your can use the above and providing your factory that
                // does not depend on factory build options.
                // Obviously, creating your own factory for the auth service
                // that does not rely on build option is preferable since it
                // caches the created instance.
                // We provide AuthenticationServiceFactory If you don't have your
                // own auth service factory, at the expense of not caching your
                // service while specifying the options below.
                // If the auth service is not cached, then you can
                // only retrieve it using the auth service and not the
                // service manager. Otherwise, spanning different instances
                // of auth service will yield different results in case the
                // underlying storage is unique or different across them.
                'authentication_service' => [
                    'service' => AuthenticationService::class,
                    'options' => [
                        'session' => 'session',
                        'session_container' => 'LoginAuth',
                        'adapter' => YourAuthenticationAdapter::class
                    ]
                ],
                // similar to authentication_service, if you create your own
                // ACL factory, and register it of course, you can specify it
                // like:
                //'access_control' => ACL::class,
                // otherwise, you can use provided ACL factory,
                // AccessControlListFactory, that accepts the list as
                // factory options.
                'access_control' => [
                    'service' => ACL::class,
                    'options' => [
                        'mode' => ACL::MODE_STRICT,
                        // or
                        //'mode' => AccessControlList::MODE_CHILL,
                        'policy' => ACL::POLICY_REJECT,
                        // or
                        //'policy' => AccessControlList::POLICY_AUTENTICATE,
                        // or
                        //'policy' => AccessControlList::POLICY_ACCEPT,
                        'controllers' => [
                            YourController::class => ACL::ACCESS_ALL,
                            YourAuthenticatedController::class =>
                                ACL::ACCESS_AUTHENTICATED_ONLY,
                            YourRejectedController::class => ACL::ACCESS_REJECT_ALL,
                            AdminRoleController::class => ACL::role('admin'),
                            AdminPermController::class => ACL::permission('admin'),
                            YourMultipleAccessController::class => [
                                // actions
                                'public' => ACL::ACCESS_ALL,
                                'authenticated' => ACL::ACCESS_AUTHENTICATED_ONLY,
                                'rejectAll' => ACL::ACCESS_REJECT_ALL,
                                'adminRole' => ACL::role('admin'),
                                'adminPerm' => ACL::perm('admin-perm'),
                                'specialPerm' => ACL::permission('special')
                            ]
                        ],
                        'identities' => [
                            'user1@test.com' => [
                                'roles' => [
                                    'admin'
                                ],
                                'permissions' => [
                                    'special-perm'
                                ]
                            ],
                            'user2@test.com' => [
                                'permissions' => [
                                    'admin-perm'
                                ]
                            ]
                        ],
                        'roles' => [
                            'admin' => [
                                'admin-perm'
                            ]
                        ],
                        'permissions' => [
                            'admin-perm',
                            'special-perm'
                        ]
                    ]
                ],
            ],
        ],
    ],
];