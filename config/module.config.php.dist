<?php

use AliChry\Laminas\Authorization\Factory\AuthenticationServiceFactory;
use AliChry\Laminas\Authorization\AuthorizationChain;
use Laminas\Authentication\AuthenticationService;

return [
    'service_manager' => [
        'factories' => [
            // Register your AuthenticationService to our Factory or yours:
            AuthenticationService::class => AuthenticationServiceFactory::class,
            // Register yourAuth adapter(s) that implements
            // AuthenticationAdapterInterface from laminas/laminas-authentication
            YourAuthAdapter::class => YourAuthAdapterFactory::class
        ],
    ],
    'authorization' => [
        'operator' => AuthorizationChain::OPERATOR_AND,
        'chain' => [
            'global' => [
                //'authentication_service' => AuthenticationService::class,
                // Alternatively, you can use the below. The decision
                // on which to use depends on whether you have a factory
                // for the referenced service that can configure
                // the authentication service. You can still create your own
                // factory that requires factory build options while using the below,
                // or your can use the above and providing your factory that
                // does not depend on factory build options.
                // Obviously, creating your own factory for the auth service
                // that does not rely on build option is preferable since it
                // caches the created instance.
                // We provide AuthenticationServiceFactory If you don't have your
                // own auth service factory, at the expense of not caching your
                // service while specifying the options below.
                // If the auth service is not cached, then you can
                // only retrieve it using the auth service and not the
                // service manager. Otherwise, spanning different instances
                // of auth service will yield different results in case the
                // underlying storage is unique or different across them.
                'authentication_service' => [
                    'service' => AuthenticationService::class,
                    'options' => [
                        'session' => 'session',
                        'session_container' => 'LoginAuth',
                        'adapter' => YourAuthenticationAdapter::class
                    ]
                ],
                // spefcify the name of access control list to use
                // configured under alichry.access_control.list
                'access_control_list' => 'mylist'
            ],
        ],
    ],
];